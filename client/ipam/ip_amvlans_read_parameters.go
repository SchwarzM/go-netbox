// Code generated by go-swagger; DO NOT EDIT.

package ipam

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewIPAMVlansReadParams creates a new IPAMVlansReadParams object
// with the default values initialized.
func NewIPAMVlansReadParams() *IPAMVlansReadParams {
	var ()
	return &IPAMVlansReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIPAMVlansReadParamsWithTimeout creates a new IPAMVlansReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIPAMVlansReadParamsWithTimeout(timeout time.Duration) *IPAMVlansReadParams {
	var ()
	return &IPAMVlansReadParams{

		timeout: timeout,
	}
}

// NewIPAMVlansReadParamsWithContext creates a new IPAMVlansReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewIPAMVlansReadParamsWithContext(ctx context.Context) *IPAMVlansReadParams {
	var ()
	return &IPAMVlansReadParams{

		Context: ctx,
	}
}

// NewIPAMVlansReadParamsWithHTTPClient creates a new IPAMVlansReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIPAMVlansReadParamsWithHTTPClient(client *http.Client) *IPAMVlansReadParams {
	var ()
	return &IPAMVlansReadParams{
		HTTPClient: client,
	}
}

/*IPAMVlansReadParams contains all the parameters to send to the API endpoint
for the ipam vlans read operation typically these are written to a http.Request
*/
type IPAMVlansReadParams struct {

	/*Group*/
	Group *string
	/*GroupID*/
	GroupID *string
	/*ID
	  A unique integer value identifying this VLAN.

	*/
	ID int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Name*/
	Name *string
	/*Q*/
	Q *string
	/*Role*/
	Role *string
	/*RoleID*/
	RoleID *string
	/*Site*/
	Site *string
	/*SiteID*/
	SiteID *string
	/*Status*/
	Status *string
	/*Tenant*/
	Tenant *string
	/*TenantID*/
	TenantID *string
	/*Vid*/
	Vid *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ipam vlans read params
func (o *IPAMVlansReadParams) WithTimeout(timeout time.Duration) *IPAMVlansReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ipam vlans read params
func (o *IPAMVlansReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ipam vlans read params
func (o *IPAMVlansReadParams) WithContext(ctx context.Context) *IPAMVlansReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ipam vlans read params
func (o *IPAMVlansReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ipam vlans read params
func (o *IPAMVlansReadParams) WithHTTPClient(client *http.Client) *IPAMVlansReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ipam vlans read params
func (o *IPAMVlansReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the ipam vlans read params
func (o *IPAMVlansReadParams) WithGroup(group *string) *IPAMVlansReadParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the ipam vlans read params
func (o *IPAMVlansReadParams) SetGroup(group *string) {
	o.Group = group
}

// WithGroupID adds the groupID to the ipam vlans read params
func (o *IPAMVlansReadParams) WithGroupID(groupID *string) *IPAMVlansReadParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the ipam vlans read params
func (o *IPAMVlansReadParams) SetGroupID(groupID *string) {
	o.GroupID = groupID
}

// WithID adds the id to the ipam vlans read params
func (o *IPAMVlansReadParams) WithID(id int64) *IPAMVlansReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ipam vlans read params
func (o *IPAMVlansReadParams) SetID(id int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the ipam vlans read params
func (o *IPAMVlansReadParams) WithIDIn(iDIn *float64) *IPAMVlansReadParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the ipam vlans read params
func (o *IPAMVlansReadParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithName adds the name to the ipam vlans read params
func (o *IPAMVlansReadParams) WithName(name *string) *IPAMVlansReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the ipam vlans read params
func (o *IPAMVlansReadParams) SetName(name *string) {
	o.Name = name
}

// WithQ adds the q to the ipam vlans read params
func (o *IPAMVlansReadParams) WithQ(q *string) *IPAMVlansReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the ipam vlans read params
func (o *IPAMVlansReadParams) SetQ(q *string) {
	o.Q = q
}

// WithRole adds the role to the ipam vlans read params
func (o *IPAMVlansReadParams) WithRole(role *string) *IPAMVlansReadParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the ipam vlans read params
func (o *IPAMVlansReadParams) SetRole(role *string) {
	o.Role = role
}

// WithRoleID adds the roleID to the ipam vlans read params
func (o *IPAMVlansReadParams) WithRoleID(roleID *string) *IPAMVlansReadParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the ipam vlans read params
func (o *IPAMVlansReadParams) SetRoleID(roleID *string) {
	o.RoleID = roleID
}

// WithSite adds the site to the ipam vlans read params
func (o *IPAMVlansReadParams) WithSite(site *string) *IPAMVlansReadParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the ipam vlans read params
func (o *IPAMVlansReadParams) SetSite(site *string) {
	o.Site = site
}

// WithSiteID adds the siteID to the ipam vlans read params
func (o *IPAMVlansReadParams) WithSiteID(siteID *string) *IPAMVlansReadParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the ipam vlans read params
func (o *IPAMVlansReadParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WithStatus adds the status to the ipam vlans read params
func (o *IPAMVlansReadParams) WithStatus(status *string) *IPAMVlansReadParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the ipam vlans read params
func (o *IPAMVlansReadParams) SetStatus(status *string) {
	o.Status = status
}

// WithTenant adds the tenant to the ipam vlans read params
func (o *IPAMVlansReadParams) WithTenant(tenant *string) *IPAMVlansReadParams {
	o.SetTenant(tenant)
	return o
}

// SetTenant adds the tenant to the ipam vlans read params
func (o *IPAMVlansReadParams) SetTenant(tenant *string) {
	o.Tenant = tenant
}

// WithTenantID adds the tenantID to the ipam vlans read params
func (o *IPAMVlansReadParams) WithTenantID(tenantID *string) *IPAMVlansReadParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the ipam vlans read params
func (o *IPAMVlansReadParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithVid adds the vid to the ipam vlans read params
func (o *IPAMVlansReadParams) WithVid(vid *float64) *IPAMVlansReadParams {
	o.SetVid(vid)
	return o
}

// SetVid adds the vid to the ipam vlans read params
func (o *IPAMVlansReadParams) SetVid(vid *float64) {
	o.Vid = vid
}

// WriteToRequest writes these params to a swagger request
func (o *IPAMVlansReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Group != nil {

		// query param group
		var qrGroup string
		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {
			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}

	}

	if o.GroupID != nil {

		// query param group_id
		var qrGroupID string
		if o.GroupID != nil {
			qrGroupID = *o.GroupID
		}
		qGroupID := qrGroupID
		if qGroupID != "" {
			if err := r.SetQueryParam("group_id", qGroupID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if o.RoleID != nil {

		// query param role_id
		var qrRoleID string
		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := qrRoleID
		if qRoleID != "" {
			if err := r.SetQueryParam("role_id", qRoleID); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Tenant != nil {

		// query param tenant
		var qrTenant string
		if o.Tenant != nil {
			qrTenant = *o.Tenant
		}
		qTenant := qrTenant
		if qTenant != "" {
			if err := r.SetQueryParam("tenant", qTenant); err != nil {
				return err
			}
		}

	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID string
		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {
			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}

	}

	if o.Vid != nil {

		// query param vid
		var qrVid float64
		if o.Vid != nil {
			qrVid = *o.Vid
		}
		qVid := swag.FormatFloat64(qrVid)
		if qVid != "" {
			if err := r.SetQueryParam("vid", qVid); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
