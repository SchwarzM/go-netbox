// Code generated by go-swagger; DO NOT EDIT.

package ipam

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewIPAMServicesReadParams creates a new IPAMServicesReadParams object
// with the default values initialized.
func NewIPAMServicesReadParams() *IPAMServicesReadParams {
	var ()
	return &IPAMServicesReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIPAMServicesReadParamsWithTimeout creates a new IPAMServicesReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIPAMServicesReadParamsWithTimeout(timeout time.Duration) *IPAMServicesReadParams {
	var ()
	return &IPAMServicesReadParams{

		timeout: timeout,
	}
}

// NewIPAMServicesReadParamsWithContext creates a new IPAMServicesReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewIPAMServicesReadParamsWithContext(ctx context.Context) *IPAMServicesReadParams {
	var ()
	return &IPAMServicesReadParams{

		Context: ctx,
	}
}

// NewIPAMServicesReadParamsWithHTTPClient creates a new IPAMServicesReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIPAMServicesReadParamsWithHTTPClient(client *http.Client) *IPAMServicesReadParams {
	var ()
	return &IPAMServicesReadParams{
		HTTPClient: client,
	}
}

/*IPAMServicesReadParams contains all the parameters to send to the API endpoint
for the ipam services read operation typically these are written to a http.Request
*/
type IPAMServicesReadParams struct {

	/*Device*/
	Device *string
	/*DeviceID*/
	DeviceID *string
	/*ID
	  A unique integer value identifying this service.

	*/
	ID int64
	/*Name*/
	Name *string
	/*Port*/
	Port *float64
	/*Protocol*/
	Protocol *string
	/*VirtualMachine*/
	VirtualMachine *string
	/*VirtualMachineID*/
	VirtualMachineID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ipam services read params
func (o *IPAMServicesReadParams) WithTimeout(timeout time.Duration) *IPAMServicesReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ipam services read params
func (o *IPAMServicesReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ipam services read params
func (o *IPAMServicesReadParams) WithContext(ctx context.Context) *IPAMServicesReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ipam services read params
func (o *IPAMServicesReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ipam services read params
func (o *IPAMServicesReadParams) WithHTTPClient(client *http.Client) *IPAMServicesReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ipam services read params
func (o *IPAMServicesReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the ipam services read params
func (o *IPAMServicesReadParams) WithDevice(device *string) *IPAMServicesReadParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the ipam services read params
func (o *IPAMServicesReadParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the ipam services read params
func (o *IPAMServicesReadParams) WithDeviceID(deviceID *string) *IPAMServicesReadParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the ipam services read params
func (o *IPAMServicesReadParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithID adds the id to the ipam services read params
func (o *IPAMServicesReadParams) WithID(id int64) *IPAMServicesReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ipam services read params
func (o *IPAMServicesReadParams) SetID(id int64) {
	o.ID = id
}

// WithName adds the name to the ipam services read params
func (o *IPAMServicesReadParams) WithName(name *string) *IPAMServicesReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the ipam services read params
func (o *IPAMServicesReadParams) SetName(name *string) {
	o.Name = name
}

// WithPort adds the port to the ipam services read params
func (o *IPAMServicesReadParams) WithPort(port *float64) *IPAMServicesReadParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the ipam services read params
func (o *IPAMServicesReadParams) SetPort(port *float64) {
	o.Port = port
}

// WithProtocol adds the protocol to the ipam services read params
func (o *IPAMServicesReadParams) WithProtocol(protocol *string) *IPAMServicesReadParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the ipam services read params
func (o *IPAMServicesReadParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithVirtualMachine adds the virtualMachine to the ipam services read params
func (o *IPAMServicesReadParams) WithVirtualMachine(virtualMachine *string) *IPAMServicesReadParams {
	o.SetVirtualMachine(virtualMachine)
	return o
}

// SetVirtualMachine adds the virtualMachine to the ipam services read params
func (o *IPAMServicesReadParams) SetVirtualMachine(virtualMachine *string) {
	o.VirtualMachine = virtualMachine
}

// WithVirtualMachineID adds the virtualMachineID to the ipam services read params
func (o *IPAMServicesReadParams) WithVirtualMachineID(virtualMachineID *string) *IPAMServicesReadParams {
	o.SetVirtualMachineID(virtualMachineID)
	return o
}

// SetVirtualMachineID adds the virtualMachineId to the ipam services read params
func (o *IPAMServicesReadParams) SetVirtualMachineID(virtualMachineID *string) {
	o.VirtualMachineID = virtualMachineID
}

// WriteToRequest writes these params to a swagger request
func (o *IPAMServicesReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Port != nil {

		// query param port
		var qrPort float64
		if o.Port != nil {
			qrPort = *o.Port
		}
		qPort := swag.FormatFloat64(qrPort)
		if qPort != "" {
			if err := r.SetQueryParam("port", qPort); err != nil {
				return err
			}
		}

	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string
		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {
			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}

	}

	if o.VirtualMachine != nil {

		// query param virtual_machine
		var qrVirtualMachine string
		if o.VirtualMachine != nil {
			qrVirtualMachine = *o.VirtualMachine
		}
		qVirtualMachine := qrVirtualMachine
		if qVirtualMachine != "" {
			if err := r.SetQueryParam("virtual_machine", qVirtualMachine); err != nil {
				return err
			}
		}

	}

	if o.VirtualMachineID != nil {

		// query param virtual_machine_id
		var qrVirtualMachineID string
		if o.VirtualMachineID != nil {
			qrVirtualMachineID = *o.VirtualMachineID
		}
		qVirtualMachineID := qrVirtualMachineID
		if qVirtualMachineID != "" {
			if err := r.SetQueryParam("virtual_machine_id", qVirtualMachineID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
