// Code generated by go-swagger; DO NOT EDIT.

package ipam

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewIPAMVrfsReadParams creates a new IPAMVrfsReadParams object
// with the default values initialized.
func NewIPAMVrfsReadParams() *IPAMVrfsReadParams {
	var ()
	return &IPAMVrfsReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIPAMVrfsReadParamsWithTimeout creates a new IPAMVrfsReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIPAMVrfsReadParamsWithTimeout(timeout time.Duration) *IPAMVrfsReadParams {
	var ()
	return &IPAMVrfsReadParams{

		timeout: timeout,
	}
}

// NewIPAMVrfsReadParamsWithContext creates a new IPAMVrfsReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewIPAMVrfsReadParamsWithContext(ctx context.Context) *IPAMVrfsReadParams {
	var ()
	return &IPAMVrfsReadParams{

		Context: ctx,
	}
}

// NewIPAMVrfsReadParamsWithHTTPClient creates a new IPAMVrfsReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIPAMVrfsReadParamsWithHTTPClient(client *http.Client) *IPAMVrfsReadParams {
	var ()
	return &IPAMVrfsReadParams{
		HTTPClient: client,
	}
}

/*IPAMVrfsReadParams contains all the parameters to send to the API endpoint
for the ipam vrfs read operation typically these are written to a http.Request
*/
type IPAMVrfsReadParams struct {

	/*EnforceUnique*/
	EnforceUnique *string
	/*ID
	  A unique integer value identifying this VRF.

	*/
	ID int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Name*/
	Name *string
	/*Q*/
	Q *string
	/*Rd*/
	Rd *string
	/*Tenant*/
	Tenant *string
	/*TenantID*/
	TenantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithTimeout(timeout time.Duration) *IPAMVrfsReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithContext(ctx context.Context) *IPAMVrfsReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithHTTPClient(client *http.Client) *IPAMVrfsReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnforceUnique adds the enforceUnique to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithEnforceUnique(enforceUnique *string) *IPAMVrfsReadParams {
	o.SetEnforceUnique(enforceUnique)
	return o
}

// SetEnforceUnique adds the enforceUnique to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetEnforceUnique(enforceUnique *string) {
	o.EnforceUnique = enforceUnique
}

// WithID adds the id to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithID(id int64) *IPAMVrfsReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetID(id int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithIDIn(iDIn *float64) *IPAMVrfsReadParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithName adds the name to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithName(name *string) *IPAMVrfsReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetName(name *string) {
	o.Name = name
}

// WithQ adds the q to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithQ(q *string) *IPAMVrfsReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetQ(q *string) {
	o.Q = q
}

// WithRd adds the rd to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithRd(rd *string) *IPAMVrfsReadParams {
	o.SetRd(rd)
	return o
}

// SetRd adds the rd to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetRd(rd *string) {
	o.Rd = rd
}

// WithTenant adds the tenant to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithTenant(tenant *string) *IPAMVrfsReadParams {
	o.SetTenant(tenant)
	return o
}

// SetTenant adds the tenant to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetTenant(tenant *string) {
	o.Tenant = tenant
}

// WithTenantID adds the tenantID to the ipam vrfs read params
func (o *IPAMVrfsReadParams) WithTenantID(tenantID *string) *IPAMVrfsReadParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the ipam vrfs read params
func (o *IPAMVrfsReadParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *IPAMVrfsReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnforceUnique != nil {

		// query param enforce_unique
		var qrEnforceUnique string
		if o.EnforceUnique != nil {
			qrEnforceUnique = *o.EnforceUnique
		}
		qEnforceUnique := qrEnforceUnique
		if qEnforceUnique != "" {
			if err := r.SetQueryParam("enforce_unique", qEnforceUnique); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Rd != nil {

		// query param rd
		var qrRd string
		if o.Rd != nil {
			qrRd = *o.Rd
		}
		qRd := qrRd
		if qRd != "" {
			if err := r.SetQueryParam("rd", qRd); err != nil {
				return err
			}
		}

	}

	if o.Tenant != nil {

		// query param tenant
		var qrTenant string
		if o.Tenant != nil {
			qrTenant = *o.Tenant
		}
		qTenant := qrTenant
		if qTenant != "" {
			if err := r.SetQueryParam("tenant", qTenant); err != nil {
				return err
			}
		}

	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID string
		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {
			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
