// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSecretsSecretsReadParams creates a new SecretsSecretsReadParams object
// with the default values initialized.
func NewSecretsSecretsReadParams() *SecretsSecretsReadParams {
	var ()
	return &SecretsSecretsReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSecretsSecretsReadParamsWithTimeout creates a new SecretsSecretsReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSecretsSecretsReadParamsWithTimeout(timeout time.Duration) *SecretsSecretsReadParams {
	var ()
	return &SecretsSecretsReadParams{

		timeout: timeout,
	}
}

// NewSecretsSecretsReadParamsWithContext creates a new SecretsSecretsReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewSecretsSecretsReadParamsWithContext(ctx context.Context) *SecretsSecretsReadParams {
	var ()
	return &SecretsSecretsReadParams{

		Context: ctx,
	}
}

// NewSecretsSecretsReadParamsWithHTTPClient creates a new SecretsSecretsReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSecretsSecretsReadParamsWithHTTPClient(client *http.Client) *SecretsSecretsReadParams {
	var ()
	return &SecretsSecretsReadParams{
		HTTPClient: client,
	}
}

/*SecretsSecretsReadParams contains all the parameters to send to the API endpoint
for the secrets secrets read operation typically these are written to a http.Request
*/
type SecretsSecretsReadParams struct {

	/*Device*/
	Device *string
	/*DeviceID*/
	DeviceID *string
	/*ID
	  A unique integer value identifying this secret.

	*/
	ID int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Name*/
	Name *string
	/*Q*/
	Q *string
	/*Role*/
	Role *string
	/*RoleID*/
	RoleID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithTimeout(timeout time.Duration) *SecretsSecretsReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithContext(ctx context.Context) *SecretsSecretsReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithHTTPClient(client *http.Client) *SecretsSecretsReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithDevice(device *string) *SecretsSecretsReadParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithDeviceID(deviceID *string) *SecretsSecretsReadParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithID adds the id to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithID(id int64) *SecretsSecretsReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetID(id int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithIDIn(iDIn *float64) *SecretsSecretsReadParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithName adds the name to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithName(name *string) *SecretsSecretsReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetName(name *string) {
	o.Name = name
}

// WithQ adds the q to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithQ(q *string) *SecretsSecretsReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetQ(q *string) {
	o.Q = q
}

// WithRole adds the role to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithRole(role *string) *SecretsSecretsReadParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetRole(role *string) {
	o.Role = role
}

// WithRoleID adds the roleID to the secrets secrets read params
func (o *SecretsSecretsReadParams) WithRoleID(roleID *string) *SecretsSecretsReadParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the secrets secrets read params
func (o *SecretsSecretsReadParams) SetRoleID(roleID *string) {
	o.RoleID = roleID
}

// WriteToRequest writes these params to a swagger request
func (o *SecretsSecretsReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if o.RoleID != nil {

		// query param role_id
		var qrRoleID string
		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := qrRoleID
		if qRoleID != "" {
			if err := r.SetQueryParam("role_id", qRoleID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
