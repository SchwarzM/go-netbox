// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SecretsChoicesList secrets choices list API
*/
func (a *Client) SecretsChoicesList(params *SecretsChoicesListParams) (*SecretsChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "secrets__choices_list",
		Method:             "GET",
		PathPattern:        "/api/secrets/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecretsChoicesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretsChoicesListOK), nil

}

/*
SecretsChoicesRead secrets choices read API
*/
func (a *Client) SecretsChoicesRead(params *SecretsChoicesReadParams) (*SecretsChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "secrets__choices_read",
		Method:             "GET",
		PathPattern:        "/api/secrets/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecretsChoicesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretsChoicesReadOK), nil

}

/*
SecretsSecretsList secrets secrets list API
*/
func (a *Client) SecretsSecretsList(params *SecretsSecretsListParams) (*SecretsSecretsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsSecretsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "secrets_secrets_list",
		Method:             "GET",
		PathPattern:        "/api/secrets/secrets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecretsSecretsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretsSecretsListOK), nil

}

/*
SecretsSecretsRead secrets secrets read API
*/
func (a *Client) SecretsSecretsRead(params *SecretsSecretsReadParams) (*SecretsSecretsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretsSecretsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "secrets_secrets_read",
		Method:             "GET",
		PathPattern:        "/api/secrets/secrets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SecretsSecretsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretsSecretsReadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
