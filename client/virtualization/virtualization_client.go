// Code generated by go-swagger; DO NOT EDIT.

package virtualization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new virtualization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtualization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VirtualizationChoicesList virtualization choices list API
*/
func (a *Client) VirtualizationChoicesList(params *VirtualizationChoicesListParams) (*VirtualizationChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization__choices_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationChoicesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationChoicesListOK), nil

}

/*
VirtualizationChoicesRead virtualization choices read API
*/
func (a *Client) VirtualizationChoicesRead(params *VirtualizationChoicesReadParams) (*VirtualizationChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization__choices_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationChoicesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationChoicesReadOK), nil

}

/*
VirtualizationClusterGroupsList virtualization cluster groups list API
*/
func (a *Client) VirtualizationClusterGroupsList(params *VirtualizationClusterGroupsListParams) (*VirtualizationClusterGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationClusterGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_cluster-groups_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationClusterGroupsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationClusterGroupsListOK), nil

}

/*
VirtualizationClusterGroupsRead virtualization cluster groups read API
*/
func (a *Client) VirtualizationClusterGroupsRead(params *VirtualizationClusterGroupsReadParams) (*VirtualizationClusterGroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationClusterGroupsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_cluster-groups_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationClusterGroupsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationClusterGroupsReadOK), nil

}

/*
VirtualizationClusterTypesList virtualization cluster types list API
*/
func (a *Client) VirtualizationClusterTypesList(params *VirtualizationClusterTypesListParams) (*VirtualizationClusterTypesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationClusterTypesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_cluster-types_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationClusterTypesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationClusterTypesListOK), nil

}

/*
VirtualizationClusterTypesRead virtualization cluster types read API
*/
func (a *Client) VirtualizationClusterTypesRead(params *VirtualizationClusterTypesReadParams) (*VirtualizationClusterTypesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationClusterTypesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_cluster-types_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationClusterTypesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationClusterTypesReadOK), nil

}

/*
VirtualizationClustersList virtualization clusters list API
*/
func (a *Client) VirtualizationClustersList(params *VirtualizationClustersListParams) (*VirtualizationClustersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationClustersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_clusters_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationClustersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationClustersListOK), nil

}

/*
VirtualizationClustersRead virtualization clusters read API
*/
func (a *Client) VirtualizationClustersRead(params *VirtualizationClustersReadParams) (*VirtualizationClustersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationClustersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_clusters_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/clusters/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationClustersReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationClustersReadOK), nil

}

/*
VirtualizationInterfacesList virtualization interfaces list API
*/
func (a *Client) VirtualizationInterfacesList(params *VirtualizationInterfacesListParams) (*VirtualizationInterfacesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationInterfacesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_interfaces_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/interfaces/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationInterfacesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationInterfacesListOK), nil

}

/*
VirtualizationInterfacesRead virtualization interfaces read API
*/
func (a *Client) VirtualizationInterfacesRead(params *VirtualizationInterfacesReadParams) (*VirtualizationInterfacesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationInterfacesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_interfaces_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationInterfacesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationInterfacesReadOK), nil

}

/*
VirtualizationVirtualMachinesList virtualization virtual machines list API
*/
func (a *Client) VirtualizationVirtualMachinesList(params *VirtualizationVirtualMachinesListParams) (*VirtualizationVirtualMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationVirtualMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_virtual-machines_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/virtual-machines/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationVirtualMachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationVirtualMachinesListOK), nil

}

/*
VirtualizationVirtualMachinesRead virtualization virtual machines read API
*/
func (a *Client) VirtualizationVirtualMachinesRead(params *VirtualizationVirtualMachinesReadParams) (*VirtualizationVirtualMachinesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualizationVirtualMachinesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "virtualization_virtual-machines_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/virtual-machines/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualizationVirtualMachinesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VirtualizationVirtualMachinesReadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
