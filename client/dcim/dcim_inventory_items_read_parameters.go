// Code generated by go-swagger; DO NOT EDIT.

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimInventoryItemsReadParams creates a new DcimInventoryItemsReadParams object
// with the default values initialized.
func NewDcimInventoryItemsReadParams() *DcimInventoryItemsReadParams {
	var ()
	return &DcimInventoryItemsReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimInventoryItemsReadParamsWithTimeout creates a new DcimInventoryItemsReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimInventoryItemsReadParamsWithTimeout(timeout time.Duration) *DcimInventoryItemsReadParams {
	var ()
	return &DcimInventoryItemsReadParams{

		timeout: timeout,
	}
}

// NewDcimInventoryItemsReadParamsWithContext creates a new DcimInventoryItemsReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimInventoryItemsReadParamsWithContext(ctx context.Context) *DcimInventoryItemsReadParams {
	var ()
	return &DcimInventoryItemsReadParams{

		Context: ctx,
	}
}

// NewDcimInventoryItemsReadParamsWithHTTPClient creates a new DcimInventoryItemsReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimInventoryItemsReadParamsWithHTTPClient(client *http.Client) *DcimInventoryItemsReadParams {
	var ()
	return &DcimInventoryItemsReadParams{
		HTTPClient: client,
	}
}

/*DcimInventoryItemsReadParams contains all the parameters to send to the API endpoint
for the dcim inventory items read operation typically these are written to a http.Request
*/
type DcimInventoryItemsReadParams struct {

	/*AssetTag*/
	AssetTag *string
	/*Device*/
	Device *string
	/*DeviceID*/
	DeviceID *string
	/*Discovered*/
	Discovered *string
	/*ID
	  A unique integer value identifying this inventory item.

	*/
	ID int64
	/*Manufacturer*/
	Manufacturer *string
	/*ManufacturerID*/
	ManufacturerID *string
	/*Name*/
	Name *string
	/*ParentID*/
	ParentID *string
	/*PartID*/
	PartID *string
	/*Serial*/
	Serial *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithTimeout(timeout time.Duration) *DcimInventoryItemsReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithContext(ctx context.Context) *DcimInventoryItemsReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithHTTPClient(client *http.Client) *DcimInventoryItemsReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetTag adds the assetTag to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithAssetTag(assetTag *string) *DcimInventoryItemsReadParams {
	o.SetAssetTag(assetTag)
	return o
}

// SetAssetTag adds the assetTag to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetAssetTag(assetTag *string) {
	o.AssetTag = assetTag
}

// WithDevice adds the device to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithDevice(device *string) *DcimInventoryItemsReadParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithDeviceID(deviceID *string) *DcimInventoryItemsReadParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithDiscovered adds the discovered to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithDiscovered(discovered *string) *DcimInventoryItemsReadParams {
	o.SetDiscovered(discovered)
	return o
}

// SetDiscovered adds the discovered to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetDiscovered(discovered *string) {
	o.Discovered = discovered
}

// WithID adds the id to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithID(id int64) *DcimInventoryItemsReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetID(id int64) {
	o.ID = id
}

// WithManufacturer adds the manufacturer to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithManufacturer(manufacturer *string) *DcimInventoryItemsReadParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithManufacturerID adds the manufacturerID to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithManufacturerID(manufacturerID *string) *DcimInventoryItemsReadParams {
	o.SetManufacturerID(manufacturerID)
	return o
}

// SetManufacturerID adds the manufacturerId to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetManufacturerID(manufacturerID *string) {
	o.ManufacturerID = manufacturerID
}

// WithName adds the name to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithName(name *string) *DcimInventoryItemsReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetName(name *string) {
	o.Name = name
}

// WithParentID adds the parentID to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithParentID(parentID *string) *DcimInventoryItemsReadParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithPartID adds the partID to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithPartID(partID *string) *DcimInventoryItemsReadParams {
	o.SetPartID(partID)
	return o
}

// SetPartID adds the partId to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetPartID(partID *string) {
	o.PartID = partID
}

// WithSerial adds the serial to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) WithSerial(serial *string) *DcimInventoryItemsReadParams {
	o.SetSerial(serial)
	return o
}

// SetSerial adds the serial to the dcim inventory items read params
func (o *DcimInventoryItemsReadParams) SetSerial(serial *string) {
	o.Serial = serial
}

// WriteToRequest writes these params to a swagger request
func (o *DcimInventoryItemsReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssetTag != nil {

		// query param asset_tag
		var qrAssetTag string
		if o.AssetTag != nil {
			qrAssetTag = *o.AssetTag
		}
		qAssetTag := qrAssetTag
		if qAssetTag != "" {
			if err := r.SetQueryParam("asset_tag", qAssetTag); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	if o.Discovered != nil {

		// query param discovered
		var qrDiscovered string
		if o.Discovered != nil {
			qrDiscovered = *o.Discovered
		}
		qDiscovered := qrDiscovered
		if qDiscovered != "" {
			if err := r.SetQueryParam("discovered", qDiscovered); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Manufacturer != nil {

		// query param manufacturer
		var qrManufacturer string
		if o.Manufacturer != nil {
			qrManufacturer = *o.Manufacturer
		}
		qManufacturer := qrManufacturer
		if qManufacturer != "" {
			if err := r.SetQueryParam("manufacturer", qManufacturer); err != nil {
				return err
			}
		}

	}

	if o.ManufacturerID != nil {

		// query param manufacturer_id
		var qrManufacturerID string
		if o.ManufacturerID != nil {
			qrManufacturerID = *o.ManufacturerID
		}
		qManufacturerID := qrManufacturerID
		if qManufacturerID != "" {
			if err := r.SetQueryParam("manufacturer_id", qManufacturerID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.ParentID != nil {

		// query param parent_id
		var qrParentID string
		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {
			if err := r.SetQueryParam("parent_id", qParentID); err != nil {
				return err
			}
		}

	}

	if o.PartID != nil {

		// query param part_id
		var qrPartID string
		if o.PartID != nil {
			qrPartID = *o.PartID
		}
		qPartID := qrPartID
		if qPartID != "" {
			if err := r.SetQueryParam("part_id", qPartID); err != nil {
				return err
			}
		}

	}

	if o.Serial != nil {

		// query param serial
		var qrSerial string
		if o.Serial != nil {
			qrSerial = *o.Serial
		}
		qSerial := qrSerial
		if qSerial != "" {
			if err := r.SetQueryParam("serial", qSerial); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
