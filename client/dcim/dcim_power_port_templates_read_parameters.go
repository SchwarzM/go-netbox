// Code generated by go-swagger; DO NOT EDIT.

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimPowerPortTemplatesReadParams creates a new DcimPowerPortTemplatesReadParams object
// with the default values initialized.
func NewDcimPowerPortTemplatesReadParams() *DcimPowerPortTemplatesReadParams {
	var ()
	return &DcimPowerPortTemplatesReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimPowerPortTemplatesReadParamsWithTimeout creates a new DcimPowerPortTemplatesReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimPowerPortTemplatesReadParamsWithTimeout(timeout time.Duration) *DcimPowerPortTemplatesReadParams {
	var ()
	return &DcimPowerPortTemplatesReadParams{

		timeout: timeout,
	}
}

// NewDcimPowerPortTemplatesReadParamsWithContext creates a new DcimPowerPortTemplatesReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimPowerPortTemplatesReadParamsWithContext(ctx context.Context) *DcimPowerPortTemplatesReadParams {
	var ()
	return &DcimPowerPortTemplatesReadParams{

		Context: ctx,
	}
}

// NewDcimPowerPortTemplatesReadParamsWithHTTPClient creates a new DcimPowerPortTemplatesReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimPowerPortTemplatesReadParamsWithHTTPClient(client *http.Client) *DcimPowerPortTemplatesReadParams {
	var ()
	return &DcimPowerPortTemplatesReadParams{
		HTTPClient: client,
	}
}

/*DcimPowerPortTemplatesReadParams contains all the parameters to send to the API endpoint
for the dcim power port templates read operation typically these are written to a http.Request
*/
type DcimPowerPortTemplatesReadParams struct {

	/*DevicetypeID*/
	DevicetypeID *string
	/*ID
	  A unique integer value identifying this power port template.

	*/
	ID int64
	/*Name*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) WithTimeout(timeout time.Duration) *DcimPowerPortTemplatesReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) WithContext(ctx context.Context) *DcimPowerPortTemplatesReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) WithHTTPClient(client *http.Client) *DcimPowerPortTemplatesReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevicetypeID adds the devicetypeID to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) WithDevicetypeID(devicetypeID *string) *DcimPowerPortTemplatesReadParams {
	o.SetDevicetypeID(devicetypeID)
	return o
}

// SetDevicetypeID adds the devicetypeId to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) SetDevicetypeID(devicetypeID *string) {
	o.DevicetypeID = devicetypeID
}

// WithID adds the id to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) WithID(id int64) *DcimPowerPortTemplatesReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) SetID(id int64) {
	o.ID = id
}

// WithName adds the name to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) WithName(name *string) *DcimPowerPortTemplatesReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the dcim power port templates read params
func (o *DcimPowerPortTemplatesReadParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *DcimPowerPortTemplatesReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DevicetypeID != nil {

		// query param devicetype_id
		var qrDevicetypeID string
		if o.DevicetypeID != nil {
			qrDevicetypeID = *o.DevicetypeID
		}
		qDevicetypeID := qrDevicetypeID
		if qDevicetypeID != "" {
			if err := r.SetQueryParam("devicetype_id", qDevicetypeID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
