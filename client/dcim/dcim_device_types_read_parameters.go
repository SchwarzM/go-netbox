// Code generated by go-swagger; DO NOT EDIT.

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimDeviceTypesReadParams creates a new DcimDeviceTypesReadParams object
// with the default values initialized.
func NewDcimDeviceTypesReadParams() *DcimDeviceTypesReadParams {
	var ()
	return &DcimDeviceTypesReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimDeviceTypesReadParamsWithTimeout creates a new DcimDeviceTypesReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimDeviceTypesReadParamsWithTimeout(timeout time.Duration) *DcimDeviceTypesReadParams {
	var ()
	return &DcimDeviceTypesReadParams{

		timeout: timeout,
	}
}

// NewDcimDeviceTypesReadParamsWithContext creates a new DcimDeviceTypesReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimDeviceTypesReadParamsWithContext(ctx context.Context) *DcimDeviceTypesReadParams {
	var ()
	return &DcimDeviceTypesReadParams{

		Context: ctx,
	}
}

// NewDcimDeviceTypesReadParamsWithHTTPClient creates a new DcimDeviceTypesReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimDeviceTypesReadParamsWithHTTPClient(client *http.Client) *DcimDeviceTypesReadParams {
	var ()
	return &DcimDeviceTypesReadParams{
		HTTPClient: client,
	}
}

/*DcimDeviceTypesReadParams contains all the parameters to send to the API endpoint
for the dcim device types read operation typically these are written to a http.Request
*/
type DcimDeviceTypesReadParams struct {

	/*ID
	  A unique integer value identifying this device type.

	*/
	ID int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*IsConsoleServer*/
	IsConsoleServer *string
	/*IsFullDepth*/
	IsFullDepth *string
	/*IsNetworkDevice*/
	IsNetworkDevice *string
	/*IsPdu*/
	IsPdu *string
	/*Manufacturer*/
	Manufacturer *string
	/*ManufacturerID*/
	ManufacturerID *string
	/*Model*/
	Model *string
	/*PartNumber*/
	PartNumber *string
	/*Q*/
	Q *string
	/*Slug*/
	Slug *string
	/*SubdeviceRole*/
	SubdeviceRole *string
	/*UHeight*/
	UHeight *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithTimeout(timeout time.Duration) *DcimDeviceTypesReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithContext(ctx context.Context) *DcimDeviceTypesReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithHTTPClient(client *http.Client) *DcimDeviceTypesReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithID(id int64) *DcimDeviceTypesReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetID(id int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithIDIn(iDIn *float64) *DcimDeviceTypesReadParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithIsConsoleServer adds the isConsoleServer to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithIsConsoleServer(isConsoleServer *string) *DcimDeviceTypesReadParams {
	o.SetIsConsoleServer(isConsoleServer)
	return o
}

// SetIsConsoleServer adds the isConsoleServer to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetIsConsoleServer(isConsoleServer *string) {
	o.IsConsoleServer = isConsoleServer
}

// WithIsFullDepth adds the isFullDepth to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithIsFullDepth(isFullDepth *string) *DcimDeviceTypesReadParams {
	o.SetIsFullDepth(isFullDepth)
	return o
}

// SetIsFullDepth adds the isFullDepth to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetIsFullDepth(isFullDepth *string) {
	o.IsFullDepth = isFullDepth
}

// WithIsNetworkDevice adds the isNetworkDevice to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithIsNetworkDevice(isNetworkDevice *string) *DcimDeviceTypesReadParams {
	o.SetIsNetworkDevice(isNetworkDevice)
	return o
}

// SetIsNetworkDevice adds the isNetworkDevice to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetIsNetworkDevice(isNetworkDevice *string) {
	o.IsNetworkDevice = isNetworkDevice
}

// WithIsPdu adds the isPdu to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithIsPdu(isPdu *string) *DcimDeviceTypesReadParams {
	o.SetIsPdu(isPdu)
	return o
}

// SetIsPdu adds the isPdu to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetIsPdu(isPdu *string) {
	o.IsPdu = isPdu
}

// WithManufacturer adds the manufacturer to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithManufacturer(manufacturer *string) *DcimDeviceTypesReadParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithManufacturerID adds the manufacturerID to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithManufacturerID(manufacturerID *string) *DcimDeviceTypesReadParams {
	o.SetManufacturerID(manufacturerID)
	return o
}

// SetManufacturerID adds the manufacturerId to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetManufacturerID(manufacturerID *string) {
	o.ManufacturerID = manufacturerID
}

// WithModel adds the model to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithModel(model *string) *DcimDeviceTypesReadParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetModel(model *string) {
	o.Model = model
}

// WithPartNumber adds the partNumber to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithPartNumber(partNumber *string) *DcimDeviceTypesReadParams {
	o.SetPartNumber(partNumber)
	return o
}

// SetPartNumber adds the partNumber to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetPartNumber(partNumber *string) {
	o.PartNumber = partNumber
}

// WithQ adds the q to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithQ(q *string) *DcimDeviceTypesReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetQ(q *string) {
	o.Q = q
}

// WithSlug adds the slug to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithSlug(slug *string) *DcimDeviceTypesReadParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WithSubdeviceRole adds the subdeviceRole to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithSubdeviceRole(subdeviceRole *string) *DcimDeviceTypesReadParams {
	o.SetSubdeviceRole(subdeviceRole)
	return o
}

// SetSubdeviceRole adds the subdeviceRole to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetSubdeviceRole(subdeviceRole *string) {
	o.SubdeviceRole = subdeviceRole
}

// WithUHeight adds the uHeight to the dcim device types read params
func (o *DcimDeviceTypesReadParams) WithUHeight(uHeight *float64) *DcimDeviceTypesReadParams {
	o.SetUHeight(uHeight)
	return o
}

// SetUHeight adds the uHeight to the dcim device types read params
func (o *DcimDeviceTypesReadParams) SetUHeight(uHeight *float64) {
	o.UHeight = uHeight
}

// WriteToRequest writes these params to a swagger request
func (o *DcimDeviceTypesReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.IsConsoleServer != nil {

		// query param is_console_server
		var qrIsConsoleServer string
		if o.IsConsoleServer != nil {
			qrIsConsoleServer = *o.IsConsoleServer
		}
		qIsConsoleServer := qrIsConsoleServer
		if qIsConsoleServer != "" {
			if err := r.SetQueryParam("is_console_server", qIsConsoleServer); err != nil {
				return err
			}
		}

	}

	if o.IsFullDepth != nil {

		// query param is_full_depth
		var qrIsFullDepth string
		if o.IsFullDepth != nil {
			qrIsFullDepth = *o.IsFullDepth
		}
		qIsFullDepth := qrIsFullDepth
		if qIsFullDepth != "" {
			if err := r.SetQueryParam("is_full_depth", qIsFullDepth); err != nil {
				return err
			}
		}

	}

	if o.IsNetworkDevice != nil {

		// query param is_network_device
		var qrIsNetworkDevice string
		if o.IsNetworkDevice != nil {
			qrIsNetworkDevice = *o.IsNetworkDevice
		}
		qIsNetworkDevice := qrIsNetworkDevice
		if qIsNetworkDevice != "" {
			if err := r.SetQueryParam("is_network_device", qIsNetworkDevice); err != nil {
				return err
			}
		}

	}

	if o.IsPdu != nil {

		// query param is_pdu
		var qrIsPdu string
		if o.IsPdu != nil {
			qrIsPdu = *o.IsPdu
		}
		qIsPdu := qrIsPdu
		if qIsPdu != "" {
			if err := r.SetQueryParam("is_pdu", qIsPdu); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// query param manufacturer
		var qrManufacturer string
		if o.Manufacturer != nil {
			qrManufacturer = *o.Manufacturer
		}
		qManufacturer := qrManufacturer
		if qManufacturer != "" {
			if err := r.SetQueryParam("manufacturer", qManufacturer); err != nil {
				return err
			}
		}

	}

	if o.ManufacturerID != nil {

		// query param manufacturer_id
		var qrManufacturerID string
		if o.ManufacturerID != nil {
			qrManufacturerID = *o.ManufacturerID
		}
		qManufacturerID := qrManufacturerID
		if qManufacturerID != "" {
			if err := r.SetQueryParam("manufacturer_id", qManufacturerID); err != nil {
				return err
			}
		}

	}

	if o.Model != nil {

		// query param model
		var qrModel string
		if o.Model != nil {
			qrModel = *o.Model
		}
		qModel := qrModel
		if qModel != "" {
			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}

	}

	if o.PartNumber != nil {

		// query param part_number
		var qrPartNumber string
		if o.PartNumber != nil {
			qrPartNumber = *o.PartNumber
		}
		qPartNumber := qrPartNumber
		if qPartNumber != "" {
			if err := r.SetQueryParam("part_number", qPartNumber); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string
		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {
			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}

	}

	if o.SubdeviceRole != nil {

		// query param subdevice_role
		var qrSubdeviceRole string
		if o.SubdeviceRole != nil {
			qrSubdeviceRole = *o.SubdeviceRole
		}
		qSubdeviceRole := qrSubdeviceRole
		if qSubdeviceRole != "" {
			if err := r.SetQueryParam("subdevice_role", qSubdeviceRole); err != nil {
				return err
			}
		}

	}

	if o.UHeight != nil {

		// query param u_height
		var qrUHeight float64
		if o.UHeight != nil {
			qrUHeight = *o.UHeight
		}
		qUHeight := swag.FormatFloat64(qrUHeight)
		if qUHeight != "" {
			if err := r.SetQueryParam("u_height", qUHeight); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
