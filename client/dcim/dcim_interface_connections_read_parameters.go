// Code generated by go-swagger; DO NOT EDIT.

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimInterfaceConnectionsReadParams creates a new DcimInterfaceConnectionsReadParams object
// with the default values initialized.
func NewDcimInterfaceConnectionsReadParams() *DcimInterfaceConnectionsReadParams {
	var ()
	return &DcimInterfaceConnectionsReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimInterfaceConnectionsReadParamsWithTimeout creates a new DcimInterfaceConnectionsReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimInterfaceConnectionsReadParamsWithTimeout(timeout time.Duration) *DcimInterfaceConnectionsReadParams {
	var ()
	return &DcimInterfaceConnectionsReadParams{

		timeout: timeout,
	}
}

// NewDcimInterfaceConnectionsReadParamsWithContext creates a new DcimInterfaceConnectionsReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimInterfaceConnectionsReadParamsWithContext(ctx context.Context) *DcimInterfaceConnectionsReadParams {
	var ()
	return &DcimInterfaceConnectionsReadParams{

		Context: ctx,
	}
}

// NewDcimInterfaceConnectionsReadParamsWithHTTPClient creates a new DcimInterfaceConnectionsReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimInterfaceConnectionsReadParamsWithHTTPClient(client *http.Client) *DcimInterfaceConnectionsReadParams {
	var ()
	return &DcimInterfaceConnectionsReadParams{
		HTTPClient: client,
	}
}

/*DcimInterfaceConnectionsReadParams contains all the parameters to send to the API endpoint
for the dcim interface connections read operation typically these are written to a http.Request
*/
type DcimInterfaceConnectionsReadParams struct {

	/*ConnectionStatus*/
	ConnectionStatus *string
	/*Device*/
	Device *string
	/*ID
	  A unique integer value identifying this interface connection.

	*/
	ID int64
	/*Site*/
	Site *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) WithTimeout(timeout time.Duration) *DcimInterfaceConnectionsReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) WithContext(ctx context.Context) *DcimInterfaceConnectionsReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) WithHTTPClient(client *http.Client) *DcimInterfaceConnectionsReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionStatus adds the connectionStatus to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) WithConnectionStatus(connectionStatus *string) *DcimInterfaceConnectionsReadParams {
	o.SetConnectionStatus(connectionStatus)
	return o
}

// SetConnectionStatus adds the connectionStatus to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) SetConnectionStatus(connectionStatus *string) {
	o.ConnectionStatus = connectionStatus
}

// WithDevice adds the device to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) WithDevice(device *string) *DcimInterfaceConnectionsReadParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) SetDevice(device *string) {
	o.Device = device
}

// WithID adds the id to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) WithID(id int64) *DcimInterfaceConnectionsReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) SetID(id int64) {
	o.ID = id
}

// WithSite adds the site to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) WithSite(site *string) *DcimInterfaceConnectionsReadParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the dcim interface connections read params
func (o *DcimInterfaceConnectionsReadParams) SetSite(site *string) {
	o.Site = site
}

// WriteToRequest writes these params to a swagger request
func (o *DcimInterfaceConnectionsReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectionStatus != nil {

		// query param connection_status
		var qrConnectionStatus string
		if o.ConnectionStatus != nil {
			qrConnectionStatus = *o.ConnectionStatus
		}
		qConnectionStatus := qrConnectionStatus
		if qConnectionStatus != "" {
			if err := r.SetQueryParam("connection_status", qConnectionStatus); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
