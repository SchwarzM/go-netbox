// Code generated by go-swagger; DO NOT EDIT.

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimInterfacesReadParams creates a new DcimInterfacesReadParams object
// with the default values initialized.
func NewDcimInterfacesReadParams() *DcimInterfacesReadParams {
	var ()
	return &DcimInterfacesReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimInterfacesReadParamsWithTimeout creates a new DcimInterfacesReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimInterfacesReadParamsWithTimeout(timeout time.Duration) *DcimInterfacesReadParams {
	var ()
	return &DcimInterfacesReadParams{

		timeout: timeout,
	}
}

// NewDcimInterfacesReadParamsWithContext creates a new DcimInterfacesReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimInterfacesReadParamsWithContext(ctx context.Context) *DcimInterfacesReadParams {
	var ()
	return &DcimInterfacesReadParams{

		Context: ctx,
	}
}

// NewDcimInterfacesReadParamsWithHTTPClient creates a new DcimInterfacesReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimInterfacesReadParamsWithHTTPClient(client *http.Client) *DcimInterfacesReadParams {
	var ()
	return &DcimInterfacesReadParams{
		HTTPClient: client,
	}
}

/*DcimInterfacesReadParams contains all the parameters to send to the API endpoint
for the dcim interfaces read operation typically these are written to a http.Request
*/
type DcimInterfacesReadParams struct {

	/*Device*/
	Device *string
	/*DeviceID*/
	DeviceID *float64
	/*Enabled*/
	Enabled *string
	/*FormFactor*/
	FormFactor *string
	/*ID
	  A unique integer value identifying this interface.

	*/
	ID int64
	/*LagID*/
	LagID *string
	/*MacAddress*/
	MacAddress *string
	/*MgmtOnly*/
	MgmtOnly *string
	/*Mtu*/
	Mtu *float64
	/*Name*/
	Name *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithTimeout(timeout time.Duration) *DcimInterfacesReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithContext(ctx context.Context) *DcimInterfacesReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithHTTPClient(client *http.Client) *DcimInterfacesReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithDevice(device *string) *DcimInterfacesReadParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithDeviceID(deviceID *float64) *DcimInterfacesReadParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetDeviceID(deviceID *float64) {
	o.DeviceID = deviceID
}

// WithEnabled adds the enabled to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithEnabled(enabled *string) *DcimInterfacesReadParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetEnabled(enabled *string) {
	o.Enabled = enabled
}

// WithFormFactor adds the formFactor to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithFormFactor(formFactor *string) *DcimInterfacesReadParams {
	o.SetFormFactor(formFactor)
	return o
}

// SetFormFactor adds the formFactor to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetFormFactor(formFactor *string) {
	o.FormFactor = formFactor
}

// WithID adds the id to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithID(id int64) *DcimInterfacesReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetID(id int64) {
	o.ID = id
}

// WithLagID adds the lagID to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithLagID(lagID *string) *DcimInterfacesReadParams {
	o.SetLagID(lagID)
	return o
}

// SetLagID adds the lagId to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetLagID(lagID *string) {
	o.LagID = lagID
}

// WithMacAddress adds the macAddress to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithMacAddress(macAddress *string) *DcimInterfacesReadParams {
	o.SetMacAddress(macAddress)
	return o
}

// SetMacAddress adds the macAddress to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetMacAddress(macAddress *string) {
	o.MacAddress = macAddress
}

// WithMgmtOnly adds the mgmtOnly to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithMgmtOnly(mgmtOnly *string) *DcimInterfacesReadParams {
	o.SetMgmtOnly(mgmtOnly)
	return o
}

// SetMgmtOnly adds the mgmtOnly to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetMgmtOnly(mgmtOnly *string) {
	o.MgmtOnly = mgmtOnly
}

// WithMtu adds the mtu to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithMtu(mtu *float64) *DcimInterfacesReadParams {
	o.SetMtu(mtu)
	return o
}

// SetMtu adds the mtu to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetMtu(mtu *float64) {
	o.Mtu = mtu
}

// WithName adds the name to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithName(name *string) *DcimInterfacesReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetName(name *string) {
	o.Name = name
}

// WithType adds the typeVar to the dcim interfaces read params
func (o *DcimInterfacesReadParams) WithType(typeVar *string) *DcimInterfacesReadParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the dcim interfaces read params
func (o *DcimInterfacesReadParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *DcimInterfacesReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID float64
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := swag.FormatFloat64(qrDeviceID)
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled string
		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := qrEnabled
		if qEnabled != "" {
			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}

	}

	if o.FormFactor != nil {

		// query param form_factor
		var qrFormFactor string
		if o.FormFactor != nil {
			qrFormFactor = *o.FormFactor
		}
		qFormFactor := qrFormFactor
		if qFormFactor != "" {
			if err := r.SetQueryParam("form_factor", qFormFactor); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.LagID != nil {

		// query param lag_id
		var qrLagID string
		if o.LagID != nil {
			qrLagID = *o.LagID
		}
		qLagID := qrLagID
		if qLagID != "" {
			if err := r.SetQueryParam("lag_id", qLagID); err != nil {
				return err
			}
		}

	}

	if o.MacAddress != nil {

		// query param mac_address
		var qrMacAddress string
		if o.MacAddress != nil {
			qrMacAddress = *o.MacAddress
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {
			if err := r.SetQueryParam("mac_address", qMacAddress); err != nil {
				return err
			}
		}

	}

	if o.MgmtOnly != nil {

		// query param mgmt_only
		var qrMgmtOnly string
		if o.MgmtOnly != nil {
			qrMgmtOnly = *o.MgmtOnly
		}
		qMgmtOnly := qrMgmtOnly
		if qMgmtOnly != "" {
			if err := r.SetQueryParam("mgmt_only", qMgmtOnly); err != nil {
				return err
			}
		}

	}

	if o.Mtu != nil {

		// query param mtu
		var qrMtu float64
		if o.Mtu != nil {
			qrMtu = *o.Mtu
		}
		qMtu := swag.FormatFloat64(qrMtu)
		if qMtu != "" {
			if err := r.SetQueryParam("mtu", qMtu); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
