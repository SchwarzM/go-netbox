// Code generated by go-swagger; DO NOT EDIT.

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimSitesReadParams creates a new DcimSitesReadParams object
// with the default values initialized.
func NewDcimSitesReadParams() *DcimSitesReadParams {
	var ()
	return &DcimSitesReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimSitesReadParamsWithTimeout creates a new DcimSitesReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimSitesReadParamsWithTimeout(timeout time.Duration) *DcimSitesReadParams {
	var ()
	return &DcimSitesReadParams{

		timeout: timeout,
	}
}

// NewDcimSitesReadParamsWithContext creates a new DcimSitesReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimSitesReadParamsWithContext(ctx context.Context) *DcimSitesReadParams {
	var ()
	return &DcimSitesReadParams{

		Context: ctx,
	}
}

// NewDcimSitesReadParamsWithHTTPClient creates a new DcimSitesReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimSitesReadParamsWithHTTPClient(client *http.Client) *DcimSitesReadParams {
	var ()
	return &DcimSitesReadParams{
		HTTPClient: client,
	}
}

/*DcimSitesReadParams contains all the parameters to send to the API endpoint
for the dcim sites read operation typically these are written to a http.Request
*/
type DcimSitesReadParams struct {

	/*Asn*/
	Asn *float64
	/*ContactEmail*/
	ContactEmail *string
	/*ContactName*/
	ContactName *string
	/*ContactPhone*/
	ContactPhone *string
	/*Facility*/
	Facility *string
	/*ID
	  A unique integer value identifying this site.

	*/
	ID int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Name*/
	Name *string
	/*Q*/
	Q *string
	/*Region*/
	Region *string
	/*RegionID*/
	RegionID *string
	/*Slug*/
	Slug *string
	/*Tenant*/
	Tenant *string
	/*TenantID*/
	TenantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim sites read params
func (o *DcimSitesReadParams) WithTimeout(timeout time.Duration) *DcimSitesReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim sites read params
func (o *DcimSitesReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim sites read params
func (o *DcimSitesReadParams) WithContext(ctx context.Context) *DcimSitesReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim sites read params
func (o *DcimSitesReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim sites read params
func (o *DcimSitesReadParams) WithHTTPClient(client *http.Client) *DcimSitesReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim sites read params
func (o *DcimSitesReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsn adds the asn to the dcim sites read params
func (o *DcimSitesReadParams) WithAsn(asn *float64) *DcimSitesReadParams {
	o.SetAsn(asn)
	return o
}

// SetAsn adds the asn to the dcim sites read params
func (o *DcimSitesReadParams) SetAsn(asn *float64) {
	o.Asn = asn
}

// WithContactEmail adds the contactEmail to the dcim sites read params
func (o *DcimSitesReadParams) WithContactEmail(contactEmail *string) *DcimSitesReadParams {
	o.SetContactEmail(contactEmail)
	return o
}

// SetContactEmail adds the contactEmail to the dcim sites read params
func (o *DcimSitesReadParams) SetContactEmail(contactEmail *string) {
	o.ContactEmail = contactEmail
}

// WithContactName adds the contactName to the dcim sites read params
func (o *DcimSitesReadParams) WithContactName(contactName *string) *DcimSitesReadParams {
	o.SetContactName(contactName)
	return o
}

// SetContactName adds the contactName to the dcim sites read params
func (o *DcimSitesReadParams) SetContactName(contactName *string) {
	o.ContactName = contactName
}

// WithContactPhone adds the contactPhone to the dcim sites read params
func (o *DcimSitesReadParams) WithContactPhone(contactPhone *string) *DcimSitesReadParams {
	o.SetContactPhone(contactPhone)
	return o
}

// SetContactPhone adds the contactPhone to the dcim sites read params
func (o *DcimSitesReadParams) SetContactPhone(contactPhone *string) {
	o.ContactPhone = contactPhone
}

// WithFacility adds the facility to the dcim sites read params
func (o *DcimSitesReadParams) WithFacility(facility *string) *DcimSitesReadParams {
	o.SetFacility(facility)
	return o
}

// SetFacility adds the facility to the dcim sites read params
func (o *DcimSitesReadParams) SetFacility(facility *string) {
	o.Facility = facility
}

// WithID adds the id to the dcim sites read params
func (o *DcimSitesReadParams) WithID(id int64) *DcimSitesReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim sites read params
func (o *DcimSitesReadParams) SetID(id int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the dcim sites read params
func (o *DcimSitesReadParams) WithIDIn(iDIn *float64) *DcimSitesReadParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the dcim sites read params
func (o *DcimSitesReadParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithName adds the name to the dcim sites read params
func (o *DcimSitesReadParams) WithName(name *string) *DcimSitesReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the dcim sites read params
func (o *DcimSitesReadParams) SetName(name *string) {
	o.Name = name
}

// WithQ adds the q to the dcim sites read params
func (o *DcimSitesReadParams) WithQ(q *string) *DcimSitesReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the dcim sites read params
func (o *DcimSitesReadParams) SetQ(q *string) {
	o.Q = q
}

// WithRegion adds the region to the dcim sites read params
func (o *DcimSitesReadParams) WithRegion(region *string) *DcimSitesReadParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the dcim sites read params
func (o *DcimSitesReadParams) SetRegion(region *string) {
	o.Region = region
}

// WithRegionID adds the regionID to the dcim sites read params
func (o *DcimSitesReadParams) WithRegionID(regionID *string) *DcimSitesReadParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the dcim sites read params
func (o *DcimSitesReadParams) SetRegionID(regionID *string) {
	o.RegionID = regionID
}

// WithSlug adds the slug to the dcim sites read params
func (o *DcimSitesReadParams) WithSlug(slug *string) *DcimSitesReadParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the dcim sites read params
func (o *DcimSitesReadParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WithTenant adds the tenant to the dcim sites read params
func (o *DcimSitesReadParams) WithTenant(tenant *string) *DcimSitesReadParams {
	o.SetTenant(tenant)
	return o
}

// SetTenant adds the tenant to the dcim sites read params
func (o *DcimSitesReadParams) SetTenant(tenant *string) {
	o.Tenant = tenant
}

// WithTenantID adds the tenantID to the dcim sites read params
func (o *DcimSitesReadParams) WithTenantID(tenantID *string) *DcimSitesReadParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the dcim sites read params
func (o *DcimSitesReadParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *DcimSitesReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Asn != nil {

		// query param asn
		var qrAsn float64
		if o.Asn != nil {
			qrAsn = *o.Asn
		}
		qAsn := swag.FormatFloat64(qrAsn)
		if qAsn != "" {
			if err := r.SetQueryParam("asn", qAsn); err != nil {
				return err
			}
		}

	}

	if o.ContactEmail != nil {

		// query param contact_email
		var qrContactEmail string
		if o.ContactEmail != nil {
			qrContactEmail = *o.ContactEmail
		}
		qContactEmail := qrContactEmail
		if qContactEmail != "" {
			if err := r.SetQueryParam("contact_email", qContactEmail); err != nil {
				return err
			}
		}

	}

	if o.ContactName != nil {

		// query param contact_name
		var qrContactName string
		if o.ContactName != nil {
			qrContactName = *o.ContactName
		}
		qContactName := qrContactName
		if qContactName != "" {
			if err := r.SetQueryParam("contact_name", qContactName); err != nil {
				return err
			}
		}

	}

	if o.ContactPhone != nil {

		// query param contact_phone
		var qrContactPhone string
		if o.ContactPhone != nil {
			qrContactPhone = *o.ContactPhone
		}
		qContactPhone := qrContactPhone
		if qContactPhone != "" {
			if err := r.SetQueryParam("contact_phone", qContactPhone); err != nil {
				return err
			}
		}

	}

	if o.Facility != nil {

		// query param facility
		var qrFacility string
		if o.Facility != nil {
			qrFacility = *o.Facility
		}
		qFacility := qrFacility
		if qFacility != "" {
			if err := r.SetQueryParam("facility", qFacility); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.RegionID != nil {

		// query param region_id
		var qrRegionID string
		if o.RegionID != nil {
			qrRegionID = *o.RegionID
		}
		qRegionID := qrRegionID
		if qRegionID != "" {
			if err := r.SetQueryParam("region_id", qRegionID); err != nil {
				return err
			}
		}

	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string
		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {
			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}

	}

	if o.Tenant != nil {

		// query param tenant
		var qrTenant string
		if o.Tenant != nil {
			qrTenant = *o.Tenant
		}
		qTenant := qrTenant
		if qTenant != "" {
			if err := r.SetQueryParam("tenant", qTenant); err != nil {
				return err
			}
		}

	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID string
		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {
			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
