// Code generated by go-swagger; DO NOT EDIT.

package circuits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCircuitsCircuitTerminationsReadParams creates a new CircuitsCircuitTerminationsReadParams object
// with the default values initialized.
func NewCircuitsCircuitTerminationsReadParams() *CircuitsCircuitTerminationsReadParams {
	var ()
	return &CircuitsCircuitTerminationsReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCircuitsCircuitTerminationsReadParamsWithTimeout creates a new CircuitsCircuitTerminationsReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCircuitsCircuitTerminationsReadParamsWithTimeout(timeout time.Duration) *CircuitsCircuitTerminationsReadParams {
	var ()
	return &CircuitsCircuitTerminationsReadParams{

		timeout: timeout,
	}
}

// NewCircuitsCircuitTerminationsReadParamsWithContext creates a new CircuitsCircuitTerminationsReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewCircuitsCircuitTerminationsReadParamsWithContext(ctx context.Context) *CircuitsCircuitTerminationsReadParams {
	var ()
	return &CircuitsCircuitTerminationsReadParams{

		Context: ctx,
	}
}

// NewCircuitsCircuitTerminationsReadParamsWithHTTPClient creates a new CircuitsCircuitTerminationsReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCircuitsCircuitTerminationsReadParamsWithHTTPClient(client *http.Client) *CircuitsCircuitTerminationsReadParams {
	var ()
	return &CircuitsCircuitTerminationsReadParams{
		HTTPClient: client,
	}
}

/*CircuitsCircuitTerminationsReadParams contains all the parameters to send to the API endpoint
for the circuits circuit terminations read operation typically these are written to a http.Request
*/
type CircuitsCircuitTerminationsReadParams struct {

	/*CircuitID*/
	CircuitID *string
	/*ID
	  A unique integer value identifying this circuit termination.

	*/
	ID int64
	/*PortSpeed*/
	PortSpeed *float64
	/*Q*/
	Q *string
	/*Site*/
	Site *string
	/*SiteID*/
	SiteID *string
	/*TermSide*/
	TermSide *string
	/*UpstreamSpeed*/
	UpstreamSpeed *float64
	/*XconnectID*/
	XconnectID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithTimeout(timeout time.Duration) *CircuitsCircuitTerminationsReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithContext(ctx context.Context) *CircuitsCircuitTerminationsReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithHTTPClient(client *http.Client) *CircuitsCircuitTerminationsReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCircuitID adds the circuitID to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithCircuitID(circuitID *string) *CircuitsCircuitTerminationsReadParams {
	o.SetCircuitID(circuitID)
	return o
}

// SetCircuitID adds the circuitId to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetCircuitID(circuitID *string) {
	o.CircuitID = circuitID
}

// WithID adds the id to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithID(id int64) *CircuitsCircuitTerminationsReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetID(id int64) {
	o.ID = id
}

// WithPortSpeed adds the portSpeed to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithPortSpeed(portSpeed *float64) *CircuitsCircuitTerminationsReadParams {
	o.SetPortSpeed(portSpeed)
	return o
}

// SetPortSpeed adds the portSpeed to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetPortSpeed(portSpeed *float64) {
	o.PortSpeed = portSpeed
}

// WithQ adds the q to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithQ(q *string) *CircuitsCircuitTerminationsReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetQ(q *string) {
	o.Q = q
}

// WithSite adds the site to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithSite(site *string) *CircuitsCircuitTerminationsReadParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetSite(site *string) {
	o.Site = site
}

// WithSiteID adds the siteID to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithSiteID(siteID *string) *CircuitsCircuitTerminationsReadParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WithTermSide adds the termSide to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithTermSide(termSide *string) *CircuitsCircuitTerminationsReadParams {
	o.SetTermSide(termSide)
	return o
}

// SetTermSide adds the termSide to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetTermSide(termSide *string) {
	o.TermSide = termSide
}

// WithUpstreamSpeed adds the upstreamSpeed to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithUpstreamSpeed(upstreamSpeed *float64) *CircuitsCircuitTerminationsReadParams {
	o.SetUpstreamSpeed(upstreamSpeed)
	return o
}

// SetUpstreamSpeed adds the upstreamSpeed to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetUpstreamSpeed(upstreamSpeed *float64) {
	o.UpstreamSpeed = upstreamSpeed
}

// WithXconnectID adds the xconnectID to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) WithXconnectID(xconnectID *string) *CircuitsCircuitTerminationsReadParams {
	o.SetXconnectID(xconnectID)
	return o
}

// SetXconnectID adds the xconnectId to the circuits circuit terminations read params
func (o *CircuitsCircuitTerminationsReadParams) SetXconnectID(xconnectID *string) {
	o.XconnectID = xconnectID
}

// WriteToRequest writes these params to a swagger request
func (o *CircuitsCircuitTerminationsReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CircuitID != nil {

		// query param circuit_id
		var qrCircuitID string
		if o.CircuitID != nil {
			qrCircuitID = *o.CircuitID
		}
		qCircuitID := qrCircuitID
		if qCircuitID != "" {
			if err := r.SetQueryParam("circuit_id", qCircuitID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.PortSpeed != nil {

		// query param port_speed
		var qrPortSpeed float64
		if o.PortSpeed != nil {
			qrPortSpeed = *o.PortSpeed
		}
		qPortSpeed := swag.FormatFloat64(qrPortSpeed)
		if qPortSpeed != "" {
			if err := r.SetQueryParam("port_speed", qPortSpeed); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if o.TermSide != nil {

		// query param term_side
		var qrTermSide string
		if o.TermSide != nil {
			qrTermSide = *o.TermSide
		}
		qTermSide := qrTermSide
		if qTermSide != "" {
			if err := r.SetQueryParam("term_side", qTermSide); err != nil {
				return err
			}
		}

	}

	if o.UpstreamSpeed != nil {

		// query param upstream_speed
		var qrUpstreamSpeed float64
		if o.UpstreamSpeed != nil {
			qrUpstreamSpeed = *o.UpstreamSpeed
		}
		qUpstreamSpeed := swag.FormatFloat64(qrUpstreamSpeed)
		if qUpstreamSpeed != "" {
			if err := r.SetQueryParam("upstream_speed", qUpstreamSpeed); err != nil {
				return err
			}
		}

	}

	if o.XconnectID != nil {

		// query param xconnect_id
		var qrXconnectID string
		if o.XconnectID != nil {
			qrXconnectID = *o.XconnectID
		}
		qXconnectID := qrXconnectID
		if qXconnectID != "" {
			if err := r.SetQueryParam("xconnect_id", qXconnectID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
