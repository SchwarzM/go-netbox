// Code generated by go-swagger; DO NOT EDIT.

package circuits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCircuitsProvidersReadParams creates a new CircuitsProvidersReadParams object
// with the default values initialized.
func NewCircuitsProvidersReadParams() *CircuitsProvidersReadParams {
	var ()
	return &CircuitsProvidersReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCircuitsProvidersReadParamsWithTimeout creates a new CircuitsProvidersReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCircuitsProvidersReadParamsWithTimeout(timeout time.Duration) *CircuitsProvidersReadParams {
	var ()
	return &CircuitsProvidersReadParams{

		timeout: timeout,
	}
}

// NewCircuitsProvidersReadParamsWithContext creates a new CircuitsProvidersReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewCircuitsProvidersReadParamsWithContext(ctx context.Context) *CircuitsProvidersReadParams {
	var ()
	return &CircuitsProvidersReadParams{

		Context: ctx,
	}
}

// NewCircuitsProvidersReadParamsWithHTTPClient creates a new CircuitsProvidersReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCircuitsProvidersReadParamsWithHTTPClient(client *http.Client) *CircuitsProvidersReadParams {
	var ()
	return &CircuitsProvidersReadParams{
		HTTPClient: client,
	}
}

/*CircuitsProvidersReadParams contains all the parameters to send to the API endpoint
for the circuits providers read operation typically these are written to a http.Request
*/
type CircuitsProvidersReadParams struct {

	/*Account*/
	Account *string
	/*Asn*/
	Asn *float64
	/*ID
	  A unique integer value identifying this provider.

	*/
	ID int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Name*/
	Name *string
	/*Q*/
	Q *string
	/*Site*/
	Site *string
	/*SiteID*/
	SiteID *string
	/*Slug*/
	Slug *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithTimeout(timeout time.Duration) *CircuitsProvidersReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithContext(ctx context.Context) *CircuitsProvidersReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithHTTPClient(client *http.Client) *CircuitsProvidersReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccount adds the account to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithAccount(account *string) *CircuitsProvidersReadParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetAccount(account *string) {
	o.Account = account
}

// WithAsn adds the asn to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithAsn(asn *float64) *CircuitsProvidersReadParams {
	o.SetAsn(asn)
	return o
}

// SetAsn adds the asn to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetAsn(asn *float64) {
	o.Asn = asn
}

// WithID adds the id to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithID(id int64) *CircuitsProvidersReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetID(id int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithIDIn(iDIn *float64) *CircuitsProvidersReadParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithName adds the name to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithName(name *string) *CircuitsProvidersReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetName(name *string) {
	o.Name = name
}

// WithQ adds the q to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithQ(q *string) *CircuitsProvidersReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetQ(q *string) {
	o.Q = q
}

// WithSite adds the site to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithSite(site *string) *CircuitsProvidersReadParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetSite(site *string) {
	o.Site = site
}

// WithSiteID adds the siteID to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithSiteID(siteID *string) *CircuitsProvidersReadParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WithSlug adds the slug to the circuits providers read params
func (o *CircuitsProvidersReadParams) WithSlug(slug *string) *CircuitsProvidersReadParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the circuits providers read params
func (o *CircuitsProvidersReadParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WriteToRequest writes these params to a swagger request
func (o *CircuitsProvidersReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Account != nil {

		// query param account
		var qrAccount string
		if o.Account != nil {
			qrAccount = *o.Account
		}
		qAccount := qrAccount
		if qAccount != "" {
			if err := r.SetQueryParam("account", qAccount); err != nil {
				return err
			}
		}

	}

	if o.Asn != nil {

		// query param asn
		var qrAsn float64
		if o.Asn != nil {
			qrAsn = *o.Asn
		}
		qAsn := swag.FormatFloat64(qrAsn)
		if qAsn != "" {
			if err := r.SetQueryParam("asn", qAsn); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string
		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {
			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
