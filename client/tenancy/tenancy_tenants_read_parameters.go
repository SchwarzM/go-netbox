// Code generated by go-swagger; DO NOT EDIT.

package tenancy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTenancyTenantsReadParams creates a new TenancyTenantsReadParams object
// with the default values initialized.
func NewTenancyTenantsReadParams() *TenancyTenantsReadParams {
	var ()
	return &TenancyTenantsReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTenancyTenantsReadParamsWithTimeout creates a new TenancyTenantsReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTenancyTenantsReadParamsWithTimeout(timeout time.Duration) *TenancyTenantsReadParams {
	var ()
	return &TenancyTenantsReadParams{

		timeout: timeout,
	}
}

// NewTenancyTenantsReadParamsWithContext creates a new TenancyTenantsReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewTenancyTenantsReadParamsWithContext(ctx context.Context) *TenancyTenantsReadParams {
	var ()
	return &TenancyTenantsReadParams{

		Context: ctx,
	}
}

// NewTenancyTenantsReadParamsWithHTTPClient creates a new TenancyTenantsReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTenancyTenantsReadParamsWithHTTPClient(client *http.Client) *TenancyTenantsReadParams {
	var ()
	return &TenancyTenantsReadParams{
		HTTPClient: client,
	}
}

/*TenancyTenantsReadParams contains all the parameters to send to the API endpoint
for the tenancy tenants read operation typically these are written to a http.Request
*/
type TenancyTenantsReadParams struct {

	/*Group*/
	Group *string
	/*GroupID*/
	GroupID *string
	/*ID
	  A unique integer value identifying this tenant.

	*/
	ID int64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Name*/
	Name *string
	/*Q*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithTimeout(timeout time.Duration) *TenancyTenantsReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithContext(ctx context.Context) *TenancyTenantsReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithHTTPClient(client *http.Client) *TenancyTenantsReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithGroup(group *string) *TenancyTenantsReadParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetGroup(group *string) {
	o.Group = group
}

// WithGroupID adds the groupID to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithGroupID(groupID *string) *TenancyTenantsReadParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetGroupID(groupID *string) {
	o.GroupID = groupID
}

// WithID adds the id to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithID(id int64) *TenancyTenantsReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetID(id int64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithIDIn(iDIn *float64) *TenancyTenantsReadParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithName adds the name to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithName(name *string) *TenancyTenantsReadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetName(name *string) {
	o.Name = name
}

// WithQ adds the q to the tenancy tenants read params
func (o *TenancyTenantsReadParams) WithQ(q *string) *TenancyTenantsReadParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the tenancy tenants read params
func (o *TenancyTenantsReadParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *TenancyTenantsReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Group != nil {

		// query param group
		var qrGroup string
		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {
			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}

	}

	if o.GroupID != nil {

		// query param group_id
		var qrGroupID string
		if o.GroupID != nil {
			qrGroupID = *o.GroupID
		}
		qGroupID := qrGroupID
		if qGroupID != "" {
			if err := r.SetQueryParam("group_id", qGroupID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
