// Code generated by go-swagger; DO NOT EDIT.

package tenancy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tenancy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenancy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TenancyChoicesList tenancy choices list API
*/
func (a *Client) TenancyChoicesList(params *TenancyChoicesListParams) (*TenancyChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenancyChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tenancy__choices_list",
		Method:             "GET",
		PathPattern:        "/api/tenancy/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenancyChoicesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TenancyChoicesListOK), nil

}

/*
TenancyChoicesRead tenancy choices read API
*/
func (a *Client) TenancyChoicesRead(params *TenancyChoicesReadParams) (*TenancyChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenancyChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tenancy__choices_read",
		Method:             "GET",
		PathPattern:        "/api/tenancy/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenancyChoicesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TenancyChoicesReadOK), nil

}

/*
TenancyTenantGroupsList tenancy tenant groups list API
*/
func (a *Client) TenancyTenantGroupsList(params *TenancyTenantGroupsListParams) (*TenancyTenantGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenancyTenantGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tenancy_tenant-groups_list",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenant-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenancyTenantGroupsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TenancyTenantGroupsListOK), nil

}

/*
TenancyTenantGroupsRead tenancy tenant groups read API
*/
func (a *Client) TenancyTenantGroupsRead(params *TenancyTenantGroupsReadParams) (*TenancyTenantGroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenancyTenantGroupsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tenancy_tenant-groups_read",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenant-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenancyTenantGroupsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TenancyTenantGroupsReadOK), nil

}

/*
TenancyTenantsList tenancy tenants list API
*/
func (a *Client) TenancyTenantsList(params *TenancyTenantsListParams) (*TenancyTenantsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenancyTenantsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tenancy_tenants_list",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenants/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenancyTenantsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TenancyTenantsListOK), nil

}

/*
TenancyTenantsRead tenancy tenants read API
*/
func (a *Client) TenancyTenantsRead(params *TenancyTenantsReadParams) (*TenancyTenantsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTenancyTenantsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tenancy_tenants_read",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenants/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TenancyTenantsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TenancyTenantsReadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
